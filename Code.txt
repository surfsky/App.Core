测试类：RegexHelper


c:\nuget.exe pack ${ProjectPath}




            foreach (var header in headers)
            {
                var key = header.Key;
                var value = header.Value;
                if (!WebHeaderCollection.IsRestricted(key))
                    request.Headers.Add(key, value);
                else
                {
                    /*
                    手动设置限制标头：
                    Host由系统设置为当前主机信息。
                    Referer由 Referer 属性设置。
                    User-Agent由 UserAgent 属性设置。
                    Accept由 Accept 属性设置。
                    Connection由 Connection 属性和 KeepAlive 属性设置。
                    Range HTTP标头是通过AddRange来添加手工
                    If-Modified-Since HTTP标头通过IfModifiedSince 属性设置
                    Content-Length由 ContentLength 属性设置。
                    Content-Type由 ContentType 属性设置。
                    Expect由 Expect 属性设置。
                    Date由 Date属性设置，默认为系统的当前时间。
                    Transfer-Encoding由 TransferEncoding 属性设置（SendChunked 属性必须为 true）。
                    */
                    var k = key.ToLower();
                    if (k == "host")             request.Host = value;
                    else if (k == "referer")     request.Referer = value;
                    else if (k == "user-agent")  request.UserAgent = value;
                    else if (k == "accept")      request.Accept = value;
                    else if (k == "connection")  request.Connection = value;
                }
            }

			
    /// <summary>
    /// 自定义的请求头部处理，对于受限制头部（如Host, Referer等）可直接赋值而不报异常
    /// </summary>
    internal class FreeWebHeaders : WebHeaderCollection
    {
        public override void Add(string name, string value)
        {
            base.AddWithoutValidate(name, value);
        }
    }
	            // 会报错“”
            //FreeWebHeaders h = new FreeWebHeaders();
            //foreach (var header in headers)
            //    h.Add(header.Key, header.Value);
            //request.Headers = h;


                        //return text.IsEmpty() ? null : new DateTime?(DateTime.Parse(text));
                                    //return text.IsEmpty() ? null : new decimal?(decimal.Parse(text));
                                                //return text.IsEmpty() ? null : new double?(double.Parse(text));
            //return text.IsEmpty() ? null : new float?(float.Parse(text));
                        //return text.IsEmpty() ? null : new Int64?(Int64.Parse(text));
            //return text.IsEmpty() ? null : new UInt64?(UInt64.Parse(text));
                        //return text.IsEmpty() ? null : new Int32?(Int32.Parse(text));
            //return txt.IsEmpty() ? null : new Int16?(Int16.Parse(text));
                        //return text.IsEmpty() ? null : new bool?(Boolean.Parse(text));

                                    if (RegexHelper.IsMatch(text, RegexHelper.Integer))
            {
                int n = int.Parse(text);
                return (T)Enum.ToObject(typeof(T), n);
            }
            else
            {
            }

            /// <summary>解析文件扩展名</summary>
        public static string ParseFileExtension(string file)
        {
            /*
            string pattern = @"^(.*)(.)(.*)$";
            Regex r = new Regex(pattern);
            Match m = r.Match(file);
            if (m.Success && m.Groups.Count >= 3)
                return m.Groups[3].Value;
            return null;
            */
            int n = file.LastIndexOf('.');
            if (n != -1)
                return file.Substring(n);
            return "";
        }

		        public static T GetCache<T>(string key, Func<T> creator) where T : class
        {
            return GetCache<T>(key, creator, Cache.NoAbsoluteExpiration);
        }
        /// <summary>获取缓存对象</summary>
        public static T GetCache<T>(string key) where T : class
        {
            var cache = HttpRuntime.Cache;
            return cache[key] as T;
        }

        /// <summary>获取缓存对象（缓存有有效期，一旦失效，自动获取）</summary>
        public static object GetCache(string key, Func<object> creator, DateTime expiredTime)
        {
            var cache = HttpRuntime.Cache;
            if (creator != null && cache[key] == null)
            {
                var o = creator();
                SetCache(key, o, expiredTime);
            }
            return cache[key];
        }

		        public string Info
        {
            get
            {
                return this.Group.IsEmpty() 
                    ? string.Format("{0}({1})", this.Value, this.Name)
                    : string.Format("{0}({1}/{2})", this.Value, this.Group, this.Name)
                    ;
            }
        }

		/// <summary>字符串是否为空</summary>
        public static bool IsEmpty(this string text)
        {
            return String.IsNullOrEmpty(text);
        }

        /// <summary>字符串是否为空</summary>
        public static bool IsNotEmpty(this string text)
        {
            return !IsEmpty(text);
        }

        /// <summary>列表是否为空</summary>
        public static bool IsEmpty<T>(this IEnumerable<T> items)
        {
            if (items is string)
                return IsEmpty(items as string);
            if (items == null || items.Count() == 0)
                return true;
            return false;
        }

        /// <summary>列表是否为空</summary>
        public static bool IsNotEmpty<T>(this IEnumerable<T> items)
        {
            return !IsEmpty(items);
        }
		            //return (o == null) ? true : o.ToString().IsEmpty();


					        /*
        /// <summary>按位大写输出，如"86-FB-26-9D-19-0D-2C-85-F6-E0-46-8C-EC-A4-2A-20"</summary>
        public static string ToByteSeperateString(this byte[] bytes)
        {
            return BitConverter.ToString(bytes);
        }
        */            var sb = new StringBuilder();
            for (int i = 0; i < bytes.Length; i++)
                sb.AppendFormat("{0:x2}", bytes[i]);
            return sb.ToString();


			/// <summary>安全裁剪字符串（可替代SubString()方法）</summary>
        /// <param name="length">裁剪长度</param>
        public static string SubText(this string text, int length)
        {
            if (text.IsEmpty()) return "";
            var n = text.Length;
            if (n <= length)
                return text.Substring(0, n);
            return text.Substring(0, length);
        }

		 /// <summary>
    /// 字节数组编解码方式
    /// </summary>
    public enum ByteEncoder
    {
        /// <summary>转化为16进制，如：86fb269d190d2c85f6e0468ceca42a20</summary>
        Hex,

        /// <summary>Base64字符串编码，如"hvsmnRkNLIX24EaM7KQqIA=="</summary>
        Base64
    }

/// <summary>转化为指定格式的字符串数组</summary>
        /// <param name="codedText">编码过的字符串。格式如：0a8b7f</param>
        public static byte[] ToBytes(this string codedText, ByteEncoder enc)
        {
            switch (enc)
            {
                case ByteEncoder.Hex:      return codedText.ParseHexString();
                case ByteEncoder.Base64:   return codedText.ToBase64Bytes();
                default:                   return codedText.ParseHexString();
            }
        }

        /// <summary>解析字符串数组</summary>
        public static string ToString(this byte[] bytes, ByteEncoder enc)
        {
            switch (enc)
            {
                case ByteEncoder.Hex:      return bytes.ToHexString();
                case ByteEncoder.Base64:   return bytes.ToBase64String();
                default:                   return bytes.ToHexString();
            }
        }

            /*
            var words = new List<string>();
            //var pattern = @"(?<word>\w+)[\s,]+(\k<word>)";
            var pattern = @"(\w+)([\s,]*\w+)*\1";
            var r = new Regex(pattern);
            for (Match m = r.Match(text); m.Success; m = m.NextMatch())
            {
                var word = m.Result("${word}");
                if (!words.Contains(word))
                    words.Add(word);
            }
            return words;
            */
            //if (text.IsEmpty())
            //    return "";
            //var sb = new StringBuilder();
            //var matches = Regex.Matches(text, pattern);
            //foreach (Match match in matches)
            //    sb.Append(match.Value);
            //return sb.ToString();


                    /// <summary>用正则表达式解析获取第一个匹配结果</summary>
        public static string FindFirst(this string text, string pattern)
        {
            if (text.IsEmpty())
                return "";
            var matche = Regex.Match(text, pattern);
            if (matche.Success)
                return matche.Value;
            return "";
        }


                    return this.Group.IsEmpty()
                    ? string.Format("{0} ({1})", this.Value, this.Title)
                    : string.Format("{0} ({1}/{2})", this.Value, this.Group, this.Title)
                    ;
